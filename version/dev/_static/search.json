[{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.Instance.delete.html#delete","title":"delete","text":"delete\n\n\n\nInstance.delete(timeout: float = None)\n\nDelete the remote product instance.\n\nParameters\n\ntimeout\n\npython:float, optional\n\nTime in seconds to delete the instance. The default is None."},{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.Instance.wait_for_ready.html#wait_for_ready","title":"wait_for_ready","text":"wait_for_ready\n\n\n\nInstance.wait_for_ready(polling_interval: float = 0.5, timeout_per_request: float = None)\n\nWait for the instance to be ready.\n\nAfter calling this method, the instance services are filled and ready to\nbe used.\n\nParameters\n\npolling_interval\n\npython:float, optional\n\nTime in seconds to wait between each request. The default is 0.5.\n\ntimeout_per_request\n\npython:float, optional\n\nTimeout in seconds for each request. The default is None.\n\nRaises\n\nInstanceNotFoundError\n\nThe instance was deleted.\n\nRemoteError\n\nUnexpected server error."},{"objectID":"Home","href":"api/index.html#api-reference","title":"API reference","text":"API reference\n\nWelcome to PyPIM API documentation. Use the search feature or\nclick the links in the navigation pane to view API documentation.\n\n\n\n\n\nEntry point for the PIM Python client library.\n\n\n\nansys.platform.instancemanagement.connect() -> Client\n\nCreate a PyPIM client based on the environment configuration.\n\nBefore calling this method, is_configured() should be called to check if\nthe environment is configured to use PyPIM.\n\nThe environment configuration consists in setting the environment variable\nANSYS_PLATFORM_INSTANCEMANAGEMENT_CONFIG to the path of the PyPIM\nconfiguration file. The configuration file is a simple JSON file containing\nthe URI of the PIM API and the headers required to pass information.\n\nThe configuration file format is:\n\nReturns\n\nClient\n\nPyPIM client, which is the main entry point to using this library.\n\nRaises\n\nNotConfiguredError\n\nThe environment is not configured to use PyPIM.\n\nInvalidConfigurationError\n\nThe configuration is invalid.\n\nExamples\n\n>>> import ansys.platform.instancemanagement as pypim\n>>> if pypim.is_configured():\n>>>     client = pypim.connect()\n>>>     # use the client\n>>>     client.close()\n\n>>> import ansys.platform.instancemanagement as pypim\n>>> if pypim.is_configured():\n>>>     with pypim.connect() as client:\n>>>         # use client\n\n\n\nansys.platform.instancemanagement.is_configured() -> bool\n\nCheck if the environment is configured to use PyPIM.\n\nReturns\n\nbool\n\nTrue when the environment is configured to use PyPIM, False otherwise.\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.UnsupportedProductError.html#unsupportedproducterror","title":"UnsupportedProductError","text":"UnsupportedProductError\n\n\n\nexception ansys.platform.instancemanagement.UnsupportedProductError(product_name: str, product_version: str)\n\nIndicates that the product or version is not supported by the remote server.\n\nThis error is raised when trying to start a product that does not contain\nany matching definition in the remote server.\n\nYou can try to lift some of the constraints, such as the version constraint."},{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.Service.uri.html#uri","title":"uri","text":"uri\n\n\n\nproperty Service.uri: str\n\nUniform resource indicator (URI) to reach the service.\n\nFor gRPC, this is a valid URI following gRPC-name resolution\nsyntax. For example, https://grpc.github.io/grpc/core/md_doc_naming.html.\n\nFor HTTP or REST, this is a valid http or https URI. It is the base\npath of the service API."},{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.Definition.name.html#name","title":"name","text":"name\n\n\n\nproperty Definition.name: str\n\nName of the definition.\n\nThis name is assigned by the server and always starts with \"definitions/\".\nThis name is arbitrary. You should not rely on any static value."},{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.Instance.name.html#name","title":"name","text":"name\n\n\n\nproperty Instance.name: str\n\nName of the instance.\n\nThis name is assigned by the server and always starts with \"instances/\"."},{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.InvalidConfigurationError.html#invalidconfigurationerror","title":"InvalidConfigurationError","text":"InvalidConfigurationError\n\n\n\nexception ansys.platform.instancemanagement.InvalidConfigurationError(configuration_path: str, message: str)\n\nIndicates PyPIM is configured, but the configuration is invalid."},{"objectID":"Contribute","href":"contributing.html#contribute","title":"Contribute","text":"Contribute\n\nOverall guidance on contributing to a PyAnsys repository appears in the\nContributing topic in the PyAnsys Developerâ€™s Guide. Ensure that you are\nthoroughly familiar with this guide before attempting to contribute to PyPIM.\n\n\n\nThe following contribution information is specific to PyPIM."},{"objectID":"Contribute","href":"contributing.html#clone-the-pypim-repository","title":"Contribute > Clone the PyPIM repository","text":"Clone the PyPIM repository\n\nTo clone and install the latest version of PyPIM in development mode, run this code:"},{"objectID":"Contribute","href":"contributing.html#run-tests","title":"Contribute > Run tests","text":"Run tests\n\nTest automation relies on tox, which can be installed with this command:\n\nTests are entirely based on mocks and do not require any external software. Run\nthe tests with this command:\n\n"},{"objectID":"Contribute","href":"contributing.html#build-the-documentation","title":"Contribute > Build the documentation","text":"Build the documentation\n\nYou can build PyPIM documentation with this command:"},{"objectID":"Contribute","href":"contributing.html#build-the-package","title":"Contribute > Build the package","text":"Build the package\n\nThe PyPIM package is built using flit.\n\nTo build the package, use this command:\n\nYou can also directly install PyPIM in your current environment with\nthis command:\n\n"},{"objectID":"Contribute","href":"contributing.html#release-process","title":"Contribute > Release process","text":"Release process\n\nPyPIM follows the same release procedure as other PyAnsys libraries.\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.Definition.available_service_names.html#available_service_names","title":"available_service_names","text":"available_service_names\n\n\n\nproperty Definition.available_service_names: Sequence[str]\n\nList of the available service names.\n\nIf the product exposes a gRPC API, the service is named grpc.\nIf the product exposes a REST-like API, the service is named http.\nCustom entries might also be listed, either for sidecar services or\nother protocols."},{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.UnsupportedServiceError.html#unsupportedserviceerror","title":"UnsupportedServiceError","text":"UnsupportedServiceError\n\n\n\nexception ansys.platform.instancemanagement.UnsupportedServiceError(instance_name: str, service_name: str)\n\nIndicates an attempt was made to communicate with an instance using a service that is not        supported."},{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.Service.html#service","title":"Service","text":"Service\n\n\n\nclass ansys.platform.instancemanagement.Service(uri: str, headers: Mapping[str, str])\n\nProvides an entry point for communicating with a remote product.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.NotConfiguredError.html#notconfigurederror","title":"NotConfiguredError","text":"NotConfiguredError\n\n\n\nexception ansys.platform.instancemanagement.NotConfiguredError\n\nIndicates an attempt was made to use PyPIM without the mandatory configuration.\n\nConsider calling is_configured() before using connect()."},{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.Instance.services.html#services","title":"services","text":"services\n\n\n\nproperty Instance.services: Mapping[str, Service]\n\nList of entry points exposed by the instance.\n\nThis property is only filled when the instance is ready.\nIf the instance exposes a gRPC API, it is named grpc.\nIf the instance exposes a REST-like API, it is named http.\n\nIt may contain additional entries for custom scenarios such as sidecar services\nor other protocols."},{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.Instance.update.html#update","title":"update","text":"update\n\n\n\nInstance.update(timeout: float = None)\n\nUpdate the instance information from the remote status.\n\nParameters\n\ntimeout\n\npython:float, optional\n\nTime in seconds to update the instance. The default is None.\n\nRaises\n\nInstanceNotFoundError\n\nThe instance was deleted.\n\nRemoteError\n\nUnexpected server error."},{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.Definition.html#definition","title":"Definition","text":"Definition\n\n\n\nclass ansys.platform.instancemanagement.Definition(name: str, product_name: str, product_version: str, available_service_names: Sequence[str], stub: ProductInstanceManagerStub = None)\n\nProvides a definition of a product that can be started using the PIM API.\n\nThe definition is a static object describing a product that can be started remotely.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.Definition.create_instance.html#create_instance","title":"create_instance","text":"create_instance\n\n\n\nDefinition.create_instance(timeout: float = None, configuration: Configuration = None) -> Instance\n\nCreate a product instance from this definition.\n\nParameters\n\ntimeout\n\npython:float\n\nTime in seconds to create the instance. The default is None.\n\nReturns\n\ninstance\n\nProduct instance."},{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.Client.list_definitions.html#list_definitions","title":"list_definitions","text":"list_definitions\n\n\n\nClient.list_definitions(product_name: str = None, product_version: str = None, timeout: float = None) -> Sequence[Definition]\n\nGet the list of supported product definitions.\n\nParameters\n\nproduct_name\n\npython:str, optional\n\nFilter by product name if provided. The default is None.\n\nproduct_version\n\npython:str, optional\n\nFilter by product version if provided. The default is None.\n\ntimeout\n\npython:float, optional\n\nSet a timeout in seconds for the request if provided. The default\nis None.\n\nReturns\n\npython:list\n\nList of supported product definitions.\n\nExamples\n\n>>> import ansys.platform.instancemanagement as pypim\n>>> client = pypim.connect()\n>>> for definition in client.list_definitions(product_name=\"mapdl\"):\n>>>     print(f\"MAPDL version {definition.version} is available on the server.\")\n    MAPDL version 221 is available on the server."},{"objectID":"Home","href":"index.html#pypim","title":"PyPIM","text":"PyPIM\n\n     \n\n\n\n\n\n\n\n\n\n\n\n\n\nPyPIM exposes a Pythonic interface to\ncommunicate with the Product Instance Management (PIM) API."},{"objectID":"Home","href":"index.html#what-is-the-pim-api","title":"PyPIM > What is the PIM API?","text":"What is the PIM API?\n\nThe PIM API is a gRPC API, enabling both library and app developers to\nstart a product in a remote environment and communicate with its API.\n\nThe PIM API is intended to be as simple as possible to be adaptable in a variety of\nnetwork and software infrastructures. Using this API does not require any\nknowledge of its infrastructure. You need only know which product to\nstart and which API the product exposes. The PIM API itself exposes very few\nfeatures and assumes that all the configuration is set on a server.\n\nThe PIM API is not intended to manage stateless services, to be a job management\nsystem, or a fully featured service orchestration API. Its purpose is to expose\na minimum feature set for managing service-oriented apps."},{"objectID":"Home","href":"index.html#getting-started","title":"PyPIM > Getting started","text":"Getting started\n\nTo use PyPIM, you must have access to the PIM API.\n\nThe PIM API is a work in progress. Even though the API definition and the\nPyPIM client are published, the service itself is not publicly exposed.\n\nPyPIM itself is pure Python and relies on gRPC.\n\n"},{"objectID":"Home","href":"index.html#installation","title":"PyPIM > Installation","text":"Installation\n\nThe ansys-platform-instancemanagement package is tested for Python 3.7 through\nPython 3.10 on Windows and Linux."},{"objectID":"Home","href":"index.html#configuration","title":"PyPIM > Configuration","text":"Configuration\n\nBy default, PyPIM is configured externally instead of via code. Anywhere in the\nlocal storage, create a configuration file with this format:\n\nThen, define the environment variable\nANSYS_PLATFORM_INSTANCEMANAGEMENT_CONFIG to point to this configuration file."},{"objectID":"Home","href":"index.html#usage","title":"PyPIM > Usage","text":"Usage\n\nPyPIM is a single module called ansys.platform.instancemanagement, shortened\nto pypim.\n\nTo start MAPDL and communicate with PyPIM, use this code:\n\nYou can also use PyPIM without the with statement, as shown in this code:"},{"objectID":"Home","href":"index.html#integration","title":"PyPIM > Integration","text":"Integration\n\nPyPIM can be integrated in PyAnsys libraries to transparently switch to a remote\ninstance in a suitable environment. This process is described in Integration\nin the PyPIM documentation.\n\nFor example, starting MAPDL with PyPIM is as simple as using this code:\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.Client.close.html#close","title":"close","text":"close\n\n\n\nClient.close()\n\nClose the connection.\n\nThis method is called when using the client in a with statement."},{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.Client.get_instance.html#get_instance","title":"get_instance","text":"get_instance\n\n\n\nClient.get_instance(name: str, timeout: float = None) -> Instance\n\nGet a remote product instance by name.\n\nParameters\n\nname: str\n\nName of the instance to get. This name is assigned by the server and\nalways start with instances/. You should not rely on any static value.\nFor example, the name assigned to the instance might be instances/mapdl-a25g813.\n\ntimeout\n\npython:float, optional\n\nMaximum time in seconds for the request. The default is None.\n\nReturns\n\nInstance\n\nA remote instance.\n\nRaises\n\nInstanceNotFoundError\n\nThe instance does not exist."},{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.Client.html#client","title":"Client","text":"Client\n\n\n\nclass ansys.platform.instancemanagement.Client(channel: Channel, configuration: Configuration = None)\n\nProvides a high-level client object for interacting with the PIM API.\n\nThis class exposes the methods of the PIM API.\n\nMethods\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.Instance.build_grpc_channel.html#build_grpc_channel","title":"build_grpc_channel","text":"build_grpc_channel\n\n\n\nInstance.build_grpc_channel(service_name: str = 'grpc', **kwargs)\n\nBuild a gRPC channel to communicate with this instance.\n\nThe instance must be ready before calling this method.\n\nParameters\n\nservice_name\n\npython:str, optional\n\nCustom service name. The default is grpc.\n\nkwargs: list\n\nNamed argument to pass to the gRPC channel creation.\n\nReturns\n\ngrpc.Channel\n\ngRPC channel preconfigured to work with the instance.\n\nRaises\n\nInstanceNotReadyError\n\nThe instance is not yet ready.\n\nUnsupportedServiceError\n\nThe instance does not support the service.\n\nExamples\n\n>>> import ansys.platform.instancemanagement as pypim\n>>> from ansys.mapdl.core import Mapdl\n>>> pim=pypim.connect()\n>>> instance = pim.create_instance(product_name=\"mapdl\", product_version=\"221\")\n>>> instance.wait_for_ready()\n>>> channel = instance.build_grpc_channel(\n>>>     options=[(\"grpc.max_receive_message_length\", 8*1024**2)]\n>>> )\n>>> mapdl = Mapdl(channel=channel)\n>>> print(mapdl)\n>>> instance.delete()\n    Product:             Ansys Mechanical Enterprise\n    MAPDL Version:       22.1\n    ansys.mapdl Version: 0.61.2\n\nIf the service exposes multiple ports, this method can be used to\nconnect to another port by providing the service name:\n\n>>> filemanagement_channel=instance.build_grpc_channel(service_name=\"filemanagement\")"},{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.Instance.status_message.html#status_message","title":"status_message","text":"status_message\n\n\n\nproperty Instance.status_message: str\n\nStatus of the instance.\n\nHuman-readable message describing the status of the instance.\nThis property is always filled when the instance is not ready."},{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.Instance.definition_name.html#definition_name","title":"definition_name","text":"definition_name\n\n\n\nproperty Instance.definition_name: str\n\nName of the definition that created this instance."},{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.Definition.product_name.html#product_name","title":"product_name","text":"product_name\n\n\n\nproperty Definition.product_name: str\n\nName of the product.\n\nThis is the name of the product that can be started. For example, \"mapdl\" or\n\"fluent\"."},{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.Instance.html#instance","title":"Instance","text":"Instance\n\n\n\nclass ansys.platform.instancemanagement.Instance(definition_name: str, name: str, ready: bool, status_message: str, services: Mapping[str, Service], stub: ProductInstanceManagerStub = None)\n\nProvides a remote instance of a product.\n\nThis class is a context manager and can be used with the with statement to\nautomatically stop the remote instance when the tasks are finished.\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Integration","href":"integration.html#integration","title":"Integration","text":"Integration\n\nWhile PyPIM can be used by an app developer, it can also\nbe used behind the scene by other PyAnsys libraries to manage remote\ninstances of the products that they interact with. This enables an app\ndeveloper to write code that works both in an environment configured with PyPIM\nand an environment without such a configuration.\n\nFor example, an app developer can write the following code:\n\nThe preceding code replaces this much longer code:\n\nThis page provides guidelines for implementing the launch_* method that\ntakes PyPIM into account. Just like the entire PIM API, this page is targeted\nonly toward products that are stateful and require explicit lifecycle\nmanagement."},{"objectID":"Integration","href":"integration.html#usage","title":"Integration > Usage","text":"Usage"},{"objectID":"Integration","href":"integration.html#dependency","title":"Integration > Dependency","text":"Dependency\n\nPyPIM uses semantic versioning. To depend on PyPIM, a library\nmust include the following require string:\n\n\"ansys-platform-instancemanagement~=1.0\""},{"objectID":"Integration","href":"integration.html#condition-for-pypim-usage","title":"Integration > Condition for PyPIM usage","text":"Condition for PyPIM usage\n\nThe condition for using PyPIM transparently is that you must\nbe able to launch the product in an environment configured with PyPIM\nwithout specifying launch information. In other words, PyPIM must be\nthe default startup method in an environment that is configured with PyPIM.\n\nTo integrate PyPIM correctly, you should use either a generic method such as\nthe launch_my_product() method or a constructor that usually starts a local process.\n\nFor example, with PyMAPDL in an environment configured with PyPIM, this\ncode uses PyPIM:\n\nHowever, this code does not use PyPIM:"},{"objectID":"Integration","href":"integration.html#start-a-grpc-product","title":"Integration > Start a gRPC product","text":"Start a gRPC product\n\nTo use PyPIM, the code flow should first verify if PyPIM is configured to use\nthe is_configured() method. Then, ensure that the caller of the\nlaunch_my_product() method has not specified how to launch it.\n\nIf both conditions are met:\n\nConnect to PyPIM with the connect() method.\n\nCreate an instance with Client.create_instance() method.\n\nWait for the instance to be ready with the Instance.wait_for_ready() method.\n\nBuild a gRPC channel with the Instance.build_grpc_channel() method.\n\nTypically, the resulting code looks like this:\n\nWhen stopping the product, use this code to ensure that the remote instance\nis deleted:\n\nWhile it is PyPIMâ€™s responsibility to clean up any resource and\nprocess associated with the product, relevant product-specific cleanup\ncan still be performed."},{"objectID":"Integration","href":"integration.html#start-a-non-grpc-product","title":"Integration > Start a non-gRPC product","text":"Start a non-gRPC product\n\nWhile the code flow for a non-gRPC product is the same, connection information\nis more specific.\n\nFor a REST-ful product, the base uniform resource identifier (URI) must be\nfound under instance.services[\"http\"].uri and all requests must include the\nheaders in instance.services[\"http\"].headers.\n\nFor other protocols, an agreement between the PIM implementation and the\nclient code determines how to pass the required information in a\ndedicated entry in .services."},{"objectID":"Integration","href":"integration.html#testing","title":"Integration > Testing","text":"Testing\n\nWhen testing the PyPIM integration, you should not rely on an actual PIM\nimplementation. Instead, you should mock the interaction with PyPIM.\nVerifying that a specific PIM implementation is able to start and provide an\nendpoint to the product in a specific environment is the responsibility of the\nteam managing this environment.\n\nThis test approach mocks PyPIM behavior, resulting in a verbose test with no\nadditional dependencies. It is also not subject to bugs in PyPIM or in a PIM\nimplementation.\n\nThe initial setup of such a mock can look like this:\n\nThis initial setup is faking all the necessary parts of PyPIM. From here,\ncalling the launch_my_product() method with no parameter is expected\nto call only the mocks, which the test should now do:\n\nAfter this call, the test is ready to make all the assertions verifying that the PyPIM workflow was applied:\n\nWhen stopping the product, the test should also verify that the remote instance is deleted:"},{"objectID":"Integration","href":"integration.html#example","title":"Integration > Example","text":"Example\n\nAn example of such an integration can be seen in this\nPyMAPDL pull request."},{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.Definition.product_version.html#product_version","title":"product_version","text":"product_version\n\n\n\nproperty Definition.product_version: str\n\nVersion of the product.\n\nThis is a string describing the version.\nWhen the product is following the release process for the Ansys unified installation,\nthe version is three digits, such as 221."},{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.Client.list_instances.html#list_instances","title":"list_instances","text":"list_instances\n\n\n\nClient.list_instances(timeout: float = None) -> Sequence[Instance]\n\nList the existing instances.\n\nParameters\n\ntimeout\n\npython:float, optional\n\nMaximum time in seconds for the request. The default is None.\n\nReturns\n\npython:list\n\nList of instances.\n\nExamples\n\n>>> import ansys.platform.instancemanagement as pypim\n>>> client = pypim.connect()\n>>> for instance in client.list_instances():\n>>>     status = \"ready\" if instance.ready else \"not ready\"\n>>>     print(f\"The instance {instance.name} is {status}.\")\n    The instance instances/mapdl-221-yAVne0ve is ready"},{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.InstanceNotReadyError.html#instancenotreadyerror","title":"InstanceNotReadyError","text":"InstanceNotReadyError\n\n\n\nexception ansys.platform.instancemanagement.InstanceNotReadyError(instance_name: str)\n\nIndicates an attempt was made to communicate with an instance that is not yet ready.\n\nConsider calling wait_for_ready()\nor checking ready before use."},{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.Instance.ready.html#ready","title":"ready","text":"ready\n\n\n\nproperty Instance.ready: bool\n\nWhether the instance is ready.\n\nIf True, the services property contains the list of entry points\nexposed by the instance.\n\nIf False, the status_message property contains a human-readable\nreason."},{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.Service.headers.html#headers","title":"headers","text":"headers\n\n\n\nproperty Service.headers: Mapping[str, str]\n\nHeaders necessary to communicate with the service.\n\nFor a gRPC service, this should be translated into metadata included in\nevery communication with the service.\n\nFor a REST-like service, this should be translated into headers included in\nevery communication with the service."},{"objectID":"Home","href":"api/_autosummary/ansys.platform.instancemanagement.Client.create_instance.html#create_instance","title":"create_instance","text":"create_instance\n\n\n\nClient.create_instance(product_name: str, product_version: str = None, requests_timeout: float = None) -> Instance\n\nCreate a remote instance of a product based on its name and optionally its version.\n\nThis effectively starts the product in the backend, according to the backend configuration.\n\nThe created instance will not yet be ready to use. You must call\nwait_for_ready() to wait for the instance to be ready.\n\nParameters\n\nproduct_name\n\npython:str\n\nName of the product to start. For example, mapdl.\n\nproduct_version\n\npython:str, optional\n\nVersion of the product. For example, \"222\". The default is None.\n\nrequests_timeout\n\npython:float, optional\n\nMaximum time for each request in seconds. The default is None.\n\nReturns\n\nInstance\n\nInstance of the product.\n\nRaises\n\nUnsupportedProductError\n\nThe product or the selected version is not available remotely.\n\nExamples\n\n>>> import ansys.platform.instancemanagement as pypim\n>>> client = pypim.connect()\n>>> instance = client.create_instance(product_name=\"mapdl\")\n>>> instance.wait_for_ready()\n>>> print(instance.services)\n>>> instance.delete()\n    {'grpc': Service(uri='dns:10.240.4.231:50052', headers={})}"}]