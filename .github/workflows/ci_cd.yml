name: CI
on:
  pull_request:
  workflow_dispatch:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.10'
  DOCUMENTATION_CNAME: 'pypim.docs.pyansys.com'
  LIBRARY_NAME: 'ansys-platform-instancemanagement'
  LIBRARY_NAMESPACE: 'ansys.platform.instancemanagement'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  code-style:
    name: "Code style"
    runs-on: ubuntu-latest
    steps:
      - name: "Run PyAnsys code style checks"
        uses: ansys/actions/code-style@v8

  doc-style:
    name: "Doc style"
    runs-on: ubuntu-latest
    steps:
      - name: "Run Ansys documentation style checks"
        uses: ansys/actions/doc-style@v8
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  doc-build:
    name: "Doc building"
    runs-on: ubuntu-latest
    needs: doc-style
    steps:
      - name: "Run Ansys documentation building action"
        uses: ansys/actions/doc-build@v8

  wheelhouse:
    name: "Wheelhouse Python ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    needs: code-style
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12', '3.13']
        should-release:
          - ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags') }}
        exclude:
          - should-release: false
            os: macos-latest
    steps:
      - uses: ansys/actions/build-wheelhouse@v8
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          library-namespace: ${{ env.LIBRARY_NAMESPACE }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}

  tests:
    name: "Test ${{ matrix.python-version }} under ${{ matrix.os }}"
    needs: wheelhouse
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.10', '3.11', '3.12', '3.13']
      fail-fast: false
    steps:
      - name: "Test ${{ matrix.python-version }} under ${{ matrix.os }}"
        uses: ansys/actions/tests-pytest@v8
        with:
          pytest-extra-args: "--cov=ansys.platform.instancemanagement --cov-report=term --cov-report=html:.cov/html"

      - name: "Upload coverage to Codecov"
        if: matrix.python-version ==  ${{ env.MAIN_PYTHON_VERSION }} && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v5

  build-library:
    name: "Build library"
    needs: [doc-build, tests]
    runs-on: ubuntu-latest
    steps:
      - name: "Build library source and wheel artifacts"
        uses: ansys/actions/build-library@v8
        with:
          library-name: ${{ env.LIBRARY_NAME }}

  doc-deploy-development:
    name: Doc dev version deploy
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build-library
    steps:
      - name: "Deploy developers documentation"
        uses: ansys/actions/doc-deploy-dev@v8
        with:
            cname: ${{ env.DOCUMENTATION_CNAME }}
            token: ${{ secrets.GITHUB_TOKEN }}
            bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
            bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  release:
    name: "Release to private and public PyPI and to GitHub"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: [build-library]
    steps:

      - name: "Release to the private PyPI repository"
        uses: ansys/actions/release-pypi-private@v8
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}

      - name: "Release to the public PyPI repository"
        uses: ansys/actions/release-pypi-public@v8
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          twine-username: "__token__"
          twine-token: ${{ secrets.PYPI_TOKEN }}

      - name: "Release to GitHub"
        uses: ansys/actions/release-github@v8
        with:
          library-name: ${{ env.LIBRARY_NAME }}

  doc-deploy-stable:
    name: Doc stable version deploy
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: "Deploy stable documentation"
        uses: ansys/actions/doc-deploy-stable@v8
        with:
            cname: ${{ env.DOCUMENTATION_CNAME }}
            token: ${{ secrets.GITHUB_TOKEN }}
            bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
            bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}
